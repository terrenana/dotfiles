#+property: header-args:emacs-lisp :tangle ./config.el

* Org Mode
** Setup
#+begin_src emacs-lisp
  (defun cl/init-org-mode ()
    (org-indent-mode)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . cl/init-org-mode)
    :config
   #+end_src
   ** Headings Font Size
   #+begin_src emacs-lisp
   (dolist (face '((org-level-1 . 1.2)
                   (org-level-2 . 1.1)
                   (org-level-3 . 1.05)
                   (org-level-4 . 1.0)
                   (org-level-5 . 1.1)
                   (org-level-6 . 1.1)
                   (org-level-7 . 1.1)
                   (org-level-8 . 1.1)))
     (set-face-attribute (car face) nil :font (case system-type
                                                ('gnu/linux "LiberationMono")
                                                ('darwin "Liberation Mono"))
                         :weight 'regular :height (cdr face))))
  #+end_src
** Structure Templates
  #+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (use-package org-bullets :ensure t :demand t
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

#+RESULTS:
** Polymode
#+begin_src emacs-lisp
  (use-package poly-org :ensure t :demand t
    :after org
    :hook (org-mode . poly-org-mode))
#+end_src

#+RESULTS:
* Visuals
** Relative Line Numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
** UI Tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-frame-font (case system-type
                    ('darwin "Liberation Mono")
                    ('gnu/linux "LiberationMono"))
                  nil t)
  (use-package nerd-icons :ensure t :demand t)
#+end_src
** Noctilux Theme
#+begin_src emacs-lisp 
  (load-file (expand-file-name "~/.emacs.d/noctilux-theme.el"))
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                     (load-theme 'noctilux t))))
    (load-theme 'noctilux t))
#+end_src
** Mode Line
#+begin_src emacs-lisp
  (use-package doom-modeline :ensure t :demand t
    :custom
    (doom-modeline-height 30)
    (doom-modeline-bar-width 7)
    (doom-modeline-support-imenu t)
    (doom-modeline-icon nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-buffer-encoding nil)
   (doom-modeline-minor-modes t)
   :config
   (setq inhibit-compacting-font-caches t)
   (doom-modeline-mode))
#+end_src

* Universal Modes
** Evil Mode
#+begin_src emacs-lisp
 (use-package evil :ensure t :demand t
   :config
   (evil-mode 1)
   (evil-define-key 'normal org-mode-map (kbd "TAB") #'org-cycle))
#+end_src
** Parinfer Mode
#+begin_src emacs-lisp
 (use-package parinfer-rust-mode :ensure t :demand t
   :hook emacs-lisp-mode
   :config
   (setq parinfer-rust-check-before-enable nil)
   
   (setq parinfer-rust-library (expand-file-name "~/.emacs.d/parinfer-rust/parinfer-rust.so")))
   
 (setq-default indent-tabs-mode nil)
#+end_src
** Rainbow Delimeters
#+begin_src emacs-lisp
 (use-package rainbow-delimiters :ensure t :demand t
    :hook (emacs-lisp-mode . rainbow-delimiters-mode))
#+end_src
** Escape cancels everything
#+begin_src emacs-lisp
 (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Keybinds (general.el)
#+begin_src emacs-lisp
  (use-package general :ensure t :demand t
    :after evil
    :config (general-evil-setup t)
    (general-create-definer defkey/leader
     :states '(normal emacs)
     :prefix "/")
   (defkey/leader
    "s" 'save-buffer
    "w" 'save-buffers-kill-emacs
    "f" 'find-file))
#+end_src
* Emacs Tweaks
** Ivy
#+begin_src emacs-lisp
 (use-package ivy :ensure t :demand t
   :config
   (ivy-mode))
#+end_src
** Counsel
#+begin_src emacs-lisp
 (use-package counsel :ensure t :demand t
   :config
   (counsel-mode))
#+end_src
** Swiper
#+begin_src emacs-lisp
 (global-set-key "\C-s" 'swiper)
#+end_src
** Keep crap out of ~/.emacs.d
#+begin_src emacs-lisp
 (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
       url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src
** no-littering
#+begin_src emacs-lisp
 (use-package no-littering :ensure t :demand t)
#+end_src
** Change location of autosave files
#+begin_src emacs-lisp
 (setq auto-save-file-name-transforms
       '((".*" "~/.cache/emacs/backup/" t)))
#+end_src
* Functions
** Config tools
#+begin_src emacs-lisp
 (defun reload-config () (interactive)(load-file "~/.emacs.d/init.el"))
 (defun cl/tangle-config () 
   (when (string-equal (buffer-file-name)
                       (expand-file-name "~/dotfiles/.emacs.d/config.org"))
     (let ((org-confirm-babel-evaluate nil))
       (org-babel-tangle-file "~/.emacs.d/config.org"))))
  
(advice-add #'cl/tangle-config :around #'polymode-with-current-base-buffer)

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cl/tangle-config)))
#+end_src
