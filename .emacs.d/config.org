#+TITLE: Emacs Config
#+AUTHOR: terrenana


Make startup lightning fast
#+begin_src emacs-lisp
  ;; default is 800 kb - measured in bytes
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; (server-start)

  ;; profile startup
  (add-hook 'emacs-startup-hook (lambda () (message "*** Emacs loaded in %s seconds with %d garbage collections." (emacs-init-time "%.2f") gcs-done)))
#+end_src

configure repos and use package
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  ;; uncomment this if packages arent working
  ;; (package-refresh-contents)

  (eval-when-compile
    (require 'use-package))
#+end_src

keep .emacs.d clean, as its source control tracked
#+begin_src emacs-lisp
  ;; change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
   url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; use no-littering to set common junk files to be in the new user-emacs-directory
  (use-package no-littering)

  ;; disable autosave
  (setq auto-save-default nil)
#+end_src

tab stuff
#+begin_src emacs-lisp
  ;; tab width is 2
  (setq tab-width 2)
  (setq evil-shift-width tab-width)
  ;; use spaces instead of tabs
  (setq-default indent-tabs-mode nil)
#+end_src

Keybinds with =general.el=
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
   :config (general-evil-setup t))
  (general-create-definer defkey/default
   :states '(normal emacs)
   :prefix "/")
  (general-create-definer defkey/org
   :states '(normal emacs)
   :keymaps 'org-mode-map
   :prefix "/")
  (general-create-definer defkey/rust
   :states '(normal emacs)
   :keymaps 'rustic-mode-map
   :prefix "/")
#+end_src

=EVIL TIME=
#+begin_src emacs-lisp
           ;; define functions we use later
  (defun open-config () (interactive) (find-file "~/.emacs.d/config.org") (parinfer-rust-mode))
  (defun reload-config () (interactive)(load-file "~/.emacs.d/init.el"))
   ;; autocomment lines
  (use-package evil-nerd-commenter)
  (use-package evil
   :config (evil-mode 1))
  (defkey/default
   "w" 'save-buffer
   "f" 'find-file
   "c" 'open-config
   "r" 'reload-config
   "q" 'evilnc-comment-or-uncomment-lines
   "z" 'counsel-ibuffer)

  (evil-define-key 'insert 'global (kbd "C-v") 'yank)
#+end_src

which-key keybind lookup
#+begin_src emacs-lisp
  (use-package which-key
        :config (which-key-mode))
#+end_src

clean up emacs UI
#+begin_src emacs-lisp
     ; remove visual clutter
  (setq inhibit-startup-message t)
  (setq visible-bell t
                                ring-bell-function 'ignore)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
#+end_src

relative line nums
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-wilmersdorf t))
#+end_src

font
#+begin_src emacs-lisp
  (set-frame-font "LiterationMono Nerd Font Mono" nil t)
#+end_src

modeline
#+begin_src emacs-lisp
  ; use the doom-modeline
  (use-package doom-modeline
    ;; :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 1.0))))
    (mode-line-inactive ((t (:height 1.0))))
    :custom
    (doom-modeline-height 30)
    (doom-modeline-bar-width 7)
    (doom-modeline-support-imenu t)
    (doom-modeline-lsp t)
    (doom-modeline-buffer-file-name-style 'file-name)
    (doom-modeline-icon nil)
    (doom-modeline-major-mode-icon nil)
    (doom-modeline-minor-modes nil)
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-env-version t)
    (doom-modeline-env-rust-executeable "rustc")
    :config
    (doom-modeline-mode))
#+END_SRC

use parinfer for lispy languages
#+begin_src emacs-lisp
  (use-package parinfer
   :disabled
   :hook clojure-mode
   emacs-lisp-mode
   common-lisp-mode
   scheme-mode
   lisp-mode)
  (setq parinfer-extensions
   '(defaults
     pretty-parens
     evil
     smart-tab
     smart-yank))

  (defkey/default
   "tp" 'parinfer-rust-mode)
#+end_src

Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
   :init
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

company autocompletions
#+begin_src emacs-lisp
  (use-package company
   :config
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 1)
   (setq company-selection-wrap-around t))
  (add-hook 'after-init-hook 'global-company-mode)
;; (evil-define-key 'insert company-active-map (kbd "<ret>") nil)
#+end_src

ivy, counsel, swiper
#+begin_src emacs-lisp
  (use-package ivy
    :config
    (ivy-mode))
  (use-package counsel
    :config
    (counsel-mode))
  (global-set-key "\C-s" 'swiper)
#+end_src

yafolding
#+begin_src emacs-lisp
  (use-package yafolding)
  (add-hook 'prog-mode-hook (lambda () (yafolding-mode)))
  ;; make yafolding work using <TAB> in all modes
  (evil-define-key 'normal global-map
   (kbd "<tab>") #'yafolding-toggle-element)
  (evil-define-key 'insert org-mode-map
   (kbd "<tab>") #'yafolding-toggle-element)
#+end_src

yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet
   :config
   (yas-global-mode 1))
#+end_src

Org mode
#+begin_src emacs-lisp
  ;; org mode leader keys
  (defkey/org
     "s" 'org-insert-structure-template)
#+end_src

Rust mode
#+begin_src emacs-lisp
  (use-package rustic
   :config
   (setq rustic-format-on-save t)
   (add-hook 'rustic-mode-hook 'lsp-mode)
   (add-hook 'rustic-mode-hook 'electric-pair-mode)
   (add-hook 'rustic-mode-hook 'lsp-ui-sideline-mode)
   :custom
   (lsp-rust-analyzer-cargo-watch-command "clippy")
   (lsp-eldoc-render-all t)
   (lsp-idle-delay 0.5)
   (lsp-ui-sideline-show-diagnostics t))
   ;; (lsp-rust-analyzer-server-format-inlay-hints nil)
   ;; (lsp-rust-analyzer-server-display-inlay-hints t)
   ;; (lsp-rust-analyzer-display-parameter-hints t)
   ;; (lsp-rust-analyzer-display-chaining-hints t))


  (defkey/rust
   "r" 'rustic-cargo-run
   "c" 'rustic-cargo-clippy
   "g" 'rustic-cargo-clippy-fix
   "a" 'lsp-execute-code-action)
#+end_src

lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
   :config
   (add-hook 'lsp-mode-hook 'lsp-ui-mode)
   :commands lsa)
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))

  (use-package lsp-ui
   :ensure
   :custom
   (lsp-ui-doc-enable t)
   (lsp-ui-sideline-update-mode 'line))
#+end_src

