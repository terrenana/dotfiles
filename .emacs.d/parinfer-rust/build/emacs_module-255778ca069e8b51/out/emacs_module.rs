/* automatically generated by rust-bindgen 0.56.0 */

pub type intmax_t = ::std::os::raw::c_long;
pub type emacs_finalizer_function =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type emacs_env = emacs_env_25;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_value_tag {
    _unused: [u8; 0],
}
pub type emacs_value = *mut emacs_value_tag;
pub const emacs_variadic_function: emacs_arity = -2;
pub type emacs_arity = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime {
    pub size: isize,
    pub private_members: *mut emacs_runtime_private,
    pub get_environment:
        ::std::option::Option<unsafe extern "C" fn(ert: *mut emacs_runtime) -> *mut emacs_env>,
}
#[test]
fn bindgen_test_layout_emacs_runtime() {
    assert_eq!(
        ::std::mem::size_of::<emacs_runtime>(),
        24usize,
        concat!("Size of: ", stringify!(emacs_runtime))
    );
    assert_eq!(
        ::std::mem::align_of::<emacs_runtime>(),
        8usize,
        concat!("Alignment of ", stringify!(emacs_runtime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).private_members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(private_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_runtime>())).get_environment as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_runtime),
            "::",
            stringify!(get_environment)
        )
    );
}
pub type emacs_init_function =
    ::std::option::Option<unsafe extern "C" fn(ert: *mut emacs_runtime) -> ::std::os::raw::c_int>;
pub type emacs_subr = ::std::option::Option<
    unsafe extern "C" fn(
        env: *mut emacs_env,
        nargs: isize,
        args: *mut emacs_value,
        data: *mut ::std::os::raw::c_void,
    ) -> emacs_value,
>;
pub const emacs_funcall_exit_return: emacs_funcall_exit = 0;
pub const emacs_funcall_exit_signal: emacs_funcall_exit = 1;
pub const emacs_funcall_exit_throw: emacs_funcall_exit = 2;
pub type emacs_funcall_exit = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_25 {
    pub size: isize,
    pub private_members: *mut emacs_env_private,
    pub make_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,
    >,
    pub free_global_ref: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, global_reference: emacs_value),
    >,
    pub non_local_exit_check:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env) -> emacs_funcall_exit>,
    pub non_local_exit_clear: ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env)>,
    pub non_local_exit_get: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol_out: *mut emacs_value,
            non_local_exit_data_out: *mut emacs_value,
        ) -> emacs_funcall_exit,
    >,
    pub non_local_exit_signal: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            non_local_exit_symbol: emacs_value,
            non_local_exit_data: emacs_value,
        ),
    >,
    pub non_local_exit_throw: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),
    >,
    pub make_function: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            min_arity: isize,
            max_arity: isize,
            function: ::std::option::Option<
                unsafe extern "C" fn(
                    env: *mut emacs_env,
                    nargs: isize,
                    args: *mut emacs_value,
                    arg1: *mut ::std::os::raw::c_void,
                ) -> emacs_value,
            >,
            documentation: *const ::std::os::raw::c_char,
            data: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub funcall: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            function: emacs_value,
            nargs: isize,
            args: *mut emacs_value,
        ) -> emacs_value,
    >,
    pub intern: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            symbol_name: *const ::std::os::raw::c_char,
        ) -> emacs_value,
    >,
    pub type_of: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,
    >,
    pub is_not_nil: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> bool,
    >,
    pub eq: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,
    >,
    pub extract_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,
    >,
    pub make_integer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,
    >,
    pub extract_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: emacs_value) -> f64>,
    pub make_float:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, value: f64) -> emacs_value>,
    pub copy_string_contents: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            value: emacs_value,
            buffer: *mut ::std::os::raw::c_char,
            size_inout: *mut isize,
        ) -> bool,
    >,
    pub make_string: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            contents: *const ::std::os::raw::c_char,
            length: isize,
        ) -> emacs_value,
    >,
    pub make_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            fin: emacs_finalizer_function,
            ptr: *mut ::std::os::raw::c_void,
        ) -> emacs_value,
    >,
    pub get_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::std::os::raw::c_void,
    >,
    pub set_user_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut emacs_env,
            uptr: emacs_value,
            ptr: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value) -> emacs_finalizer_function,
    >,
    pub set_user_finalizer: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, uptr: emacs_value, fin: emacs_finalizer_function),
    >,
    pub vec_get: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,
    >,
    pub vec_set: ::std::option::Option<
        unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),
    >,
    pub vec_size:
        ::std::option::Option<unsafe extern "C" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,
}
#[test]
fn bindgen_test_layout_emacs_env_25() {
    assert_eq!(
        ::std::mem::size_of::<emacs_env_25>(),
        232usize,
        concat!("Size of: ", stringify!(emacs_env_25))
    );
    assert_eq!(
        ::std::mem::align_of::<emacs_env_25>(),
        8usize,
        concat!("Alignment of ", stringify!(emacs_env_25))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).private_members as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(private_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_global_ref as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_global_ref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).free_global_ref as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(free_global_ref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_check as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_clear as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_get as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_signal as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_signal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).non_local_exit_throw as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(non_local_exit_throw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_function as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).funcall as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(funcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).intern as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(intern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).type_of as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(type_of)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).is_not_nil as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(is_not_nil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).eq as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(eq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_integer as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(extract_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_integer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).extract_float as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(extract_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_float as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<emacs_env_25>())).copy_string_contents as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(copy_string_contents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_string as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).make_user_ptr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(make_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_ptr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(get_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_ptr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(set_user_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).get_user_finalizer as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(get_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).set_user_finalizer as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(set_user_finalizer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_get as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_set as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emacs_env_25>())).vec_size as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(emacs_env_25),
            "::",
            stringify!(vec_size)
        )
    );
}
extern "C" {
    pub fn emacs_module_init(ert: *mut emacs_runtime) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_runtime_private {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emacs_env_private {
    pub _address: u8,
}
